/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import classUtil.DemandeCreditAttente;
import classUtil.MyMessageConsumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jboss.weld.literal.DefaultLiteral;

/**
 *
 * @author Jerome
 */
public class SupervisionPanel extends javax.swing.JPanel {
    
    private MyMessageConsumer mmc;
    private double montantTotaltransfere = 0;

    /**
     * Creates new form SupervisionPanel
     */
    public SupervisionPanel() {
        initComponents();
        
        setMontant(0);
        valideTextArea.setText("");
        mmc = new MyMessageConsumer(this);
    }

    public void setMontant(double addMontant)
    {
        montantTotaltransfere += addMontant;
        montantTransfere.setText("Montant transfere : " + String.format("%.2f", montantTotaltransfere) + " €");
    }
    
    public void logValide(String log)
    {
        valideTextArea.append(log);
    }
    
    public void addDemande(DemandeCreditAttente d)
    {
        ((DefaultListModel) listeDemandeAttente.getModel()).addElement(d);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titreLabel = new javax.swing.JLabel();
        montantTransfere = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        valideTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listeDemandeAttente = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        validerButton = new javax.swing.JButton();
        refuserButton = new javax.swing.JButton();

        titreLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        titreLabel.setText("Supervision");

        montantTransfere.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        montantTransfere.setText("montantTransfere : ");

        valideTextArea.setEditable(false);
        valideTextArea.setColumns(20);
        valideTextArea.setRows(5);
        jScrollPane1.setViewportView(valideTextArea);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Demandes validées : ");

        jScrollPane2.setViewportView(listeDemandeAttente);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("A valider : ");

        validerButton.setText("Valider");
        validerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerButtonActionPerformed(evt);
            }
        });

        refuserButton.setText("Refuser");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(titreLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(montantTransfere))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(validerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refuserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titreLabel)
                .addGap(11, 11, 11)
                .addComponent(montantTransfere)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(refuserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //Validation d'une demande de credit demandee
    private void validerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerButtonActionPerformed
        
        //si rien n'est selectionne
        if(listeDemandeAttente.getSelectedIndex() < 0)
            return;
        
        //Recuperation de la demande à valider : 
        DemandeCreditAttente dca;
        
        dca = (DemandeCreditAttente)((DefaultListModel)listeDemandeAttente.getModel()).get(listeDemandeAttente.getSelectedIndex());
        //Boite de confirmation
        int result = JOptionPane.showConfirmDialog(null, "Etes vous sur de valider cette demande : \n" + dca, "Confirmation" ,JOptionPane.YES_NO_OPTION);
        
        if(result != JOptionPane.YES_OPTION)
            return;
            
        //C'est confirme. On construit le message pour le topic et on retire la demande de la fil d'attente
        //Comme on a deja enregistre les infos dans la BD il nous faut juste l'ID du credit dans la BD, le client destinataire et l'ID temp du client
        String validation = "validationSuperviseur#";
        validation += "#" + dca.getIdEmployeSource();
        validation += "#" + dca.getIdTemp();
        validation += "#" + dca.getCredit().getId();
        
        try {
            sendJMSMessageToTopicBanque(validation);
        } catch (JMSException ex) {
            ex.printStackTrace();
            return;
        } catch (NamingException ex) {
            ex.printStackTrace();
            return;
        }
    }//GEN-LAST:event_validerButtonActionPerformed

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listeDemandeAttente;
    private javax.swing.JLabel montantTransfere;
    private javax.swing.JButton refuserButton;
    private javax.swing.JLabel titreLabel;
    private javax.swing.JTextArea valideTextArea;
    private javax.swing.JButton validerButton;
    // End of variables declaration//GEN-END:variables

    private Message createJMSMessageForjmsTopicBanque(Session session, Object messageData) throws JMSException {
        // TODO create and populate message to send
        TextMessage tm = session.createTextMessage();
        tm.setText(messageData.toString());
        return tm;
    }

    private void sendJMSMessageToTopicBanque(Object messageData) throws JMSException, NamingException {
        Context c = new InitialContext();
        ConnectionFactory cf = (ConnectionFactory) c.lookup("java:comp/env/jms/topicBanqueFactory");
        Connection conn = null;
        Session s = null;
        try {
            conn = cf.createConnection();
            s = conn.createSession(false, s.AUTO_ACKNOWLEDGE);
            Destination destination = (Destination) c.lookup("java:comp/env/jms/topicBanque");
            MessageProducer mp = s.createProducer(destination);
            mp.send(createJMSMessageForjmsTopicBanque(s, messageData));
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (JMSException e) {
                    Logger.getLogger(this.getClass().getName()).log(Level.WARNING, "Cannot close session", e);
                }
            }
            if (conn != null) {
                conn.close();
            }
        }
    }
}
